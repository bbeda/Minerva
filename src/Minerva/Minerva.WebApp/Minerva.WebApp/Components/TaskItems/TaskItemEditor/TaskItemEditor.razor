@using MediatR
@using Minerva.Application.Features.TaskItems

@implements IDialogContentComponent<TaskItemModel>
@inject IMediator mediator
@inject IJSRuntime jsRuntime

<EditForm EditContext="editContext" name="TaskItemEditor" id="TaskItemEditor" OnValidSubmit="@Submit">
    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Start">
        <DataAnnotationsValidator />
        <FluentTextField @bind-Value="Content.Title" Placeholder="Task Name" style="width:100%" />
        <ValidationMessage style="color:darkred" For="() => Content.Title"></ValidationMessage>

        <FluentTextArea @bind-Value="Content.Description" Placeholder="Description" style="width:100%" />
        <FluentDatePicker @bind-Value="Content.DueDate"></FluentDatePicker>

        <ValidationSummary style="color:darkred" />

    </FluentStack>

    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Submit" FormId="TaskItemEditor" Disabled="!canSubmit">Save</FluentButton>
        <FluentButton Appearance="Appearance.Neutral" @onclick="Cancel">Cancel</FluentButton>
    </FluentDialogFooter>
</EditForm>

@code {
    private EditContext editContext = default!;

    private bool saving = false;

    private bool canSubmit => !saving;

    [Parameter]
    public TaskItemModel Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }

    private ValidationMessageStore validationMessageStore = default!;

    protected override async Task OnInitializedAsync()
    {
        Content = Content ?? new TaskItemModel();
        editContext = new EditContext(Content);

        validationMessageStore = new ValidationMessageStore(editContext);

        await base.OnInitializedAsync();
    }

    private async void Cancel(MouseEventArgs e)
    {
        await Dialog!.CancelAsync();
    }

    private async void Submit()
    {
        if (!editContext.Validate())
        {
            return;
        }

        try
        {
            saving = true;
            var result = await mediator.Send(new CreateTaskItemCommand()
                {
                    Title = Content.Title!,
                    Description = Content.Description,
                    DueDate = Content.DueDate.HasValue ? DateOnly.FromDateTime(Content.DueDate.Value) : null
                });

            if (Dialog is not null)
            {
                await Dialog.CloseAsync();
            }
        }
        finally
        {
            saving = false;
        }
    }
}
