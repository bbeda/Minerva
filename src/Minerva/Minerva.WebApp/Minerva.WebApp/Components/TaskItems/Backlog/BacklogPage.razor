@using Minerva.WebApp.Components.TaskItems.List
@using Minerva.Application.Features.TaskItems
@using Minerva.Application.Common
@using MediatR

@page "/backlog"
@rendermode InteractiveServer

@attribute [StreamRendering(true)]

@implements IDisposable

@inject IMediator mediator
@inject INotificationsBroker notificationsBroker

<h3>Backlog</h3>

@if (taskItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <TaskItemsList TaskItems="taskItems" />
}

@code {
    private List<TaskItemListItemModel>? taskItems = null;

    private IDisposable taskCompletedSubscription;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        taskCompletedSubscription= notificationsBroker.Subscribe<TaskItemCompletedNotification>(EventCallback.Factory.Create<TaskItemCompletedNotification>(this, OnTaskCompleted));

        var data = mediator.CreateStream<TaskItemListItem>(new QueryBacklogRequest());

        var taskItemsEnumerator = data.GetAsyncEnumerator();
        if (await taskItemsEnumerator.MoveNextAsync())
        {
            taskItems = new();
            taskItems.Add(MapTaskListItem(taskItemsEnumerator.Current));

            while (await taskItemsEnumerator.MoveNextAsync())
            {
                taskItems.Add(MapTaskListItem(taskItemsEnumerator.Current));
            }
        }

        static TaskItemListItemModel MapTaskListItem(TaskItemListItem itemListItem)
        {
            return new TaskItemListItemModel
                {
                    Id = itemListItem.Id,
                    Title = itemListItem.Title,
                    IsCompleted = itemListItem.IsCompleted,
                    CreatedOn = itemListItem.CreatedOn,
                    Description = itemListItem.Description,
                    DueDate = itemListItem.DueDate
                };
        }
    }

    private void OnTaskCompleted(TaskItemCompletedNotification notification)
    {
        if (taskItems == null)
        {
            return;
        };

        var taskItem = taskItems.FirstOrDefault(x => x.Id == notification.TaskItemId);
        if (taskItem != null)
        {
            taskItems.Remove(taskItem);
        }
    }

    public Task Handle(TaskItemCompletedNotification notification, CancellationToken cancellationToken)
    {
        if (taskItems == null)
        {
            return Task.CompletedTask;
        };

        var taskItem = taskItems.FirstOrDefault(x => x.Id == notification.TaskItemId);
        if (taskItem != null)
        {
            taskItems.Remove(taskItem);
        }


        return Task.CompletedTask;
    }

    public void Dispose()
    {
        taskCompletedSubscription?.Dispose();
    }
}
