@using Minerva.WebApp.Components.TaskItems.List
@using Minerva.Application.Features.TaskItems
@using Minerva.Application.Common
@using MediatR

@page "/backlog"
@rendermode InteractiveServer

@attribute [StreamRendering(true)]

@implements IDisposable

@inject IMediator mediator
@inject INotificationsBroker<TaskItemCompletedNotification> notificationsBroker

<h3>Backlog</h3>

@if (activeTaskItemsLoading)
{
    <p><em>Loading...</em></p>
}
else if (activeTaskItems.Count == 0)
{
    <p><em>No task items found.</em></p>
}
else
{
    <TaskItemsList TaskItems="activeTaskItems" />
}

<h3>Completed</h3>

@if (completedTaskItemsLoading)
{
    <p><em>Loading...</em></p>
}
else if (completedTaskItems.Count == 0)
{
    <p><em>No task items found.</em></p>
}
else
{
    <TaskItemsList TaskItems="completedTaskItems" />
}

@code {
    private List<TaskItemListItemModel> activeTaskItems = new();
    private bool activeTaskItemsLoading = true;
    private List<TaskItemListItemModel> completedTaskItems = new();
    private bool completedTaskItemsLoading = true;

    private IDisposable? taskCompletedSubscription;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        taskCompletedSubscription = notificationsBroker.Subscribe(EventCallback.Factory.Create<TaskItemCompletedNotification>(this, OnTaskCompleted));

        await LoadTaskItemsAsync(TaskItemStatus.Open, activeTaskItems, () => activeTaskItemsLoading = false);
        await LoadTaskItemsAsync(TaskItemStatus.Complete, completedTaskItems, () => completedTaskItemsLoading = false);

        async Task LoadTaskItemsAsync(TaskItemStatus status, List<TaskItemListItemModel> collector, Action resetIsLoading)
        {
            var items = mediator.CreateStream<TaskItemListItem>(new QueryBacklogRequest() { Statuses = [status] });

            var taskItemsEnumerator = items.GetAsyncEnumerator();
            if (await taskItemsEnumerator.MoveNextAsync())
            {
                collector.Clear();
                resetIsLoading();

                collector.Add(MapTaskListItem(taskItemsEnumerator.Current));

                while (await taskItemsEnumerator.MoveNextAsync())
                {
                    collector.Add(MapTaskListItem(taskItemsEnumerator.Current));
                }
            }
            resetIsLoading();
        }

        static TaskItemListItemModel MapTaskListItem(TaskItemListItem itemListItem)
        {
            return new TaskItemListItemModel
                {
                    Id = itemListItem.Id,
                    Title = itemListItem.Title,
                    IsCompleted = itemListItem.IsCompleted,
                    CreatedOn = itemListItem.CreatedOn,
                    Description = itemListItem.Description,
                    DueDate = itemListItem.DueDate,
                    Planning = itemListItem.Planning?.Options.Select(o => new PlanningOption(o.Type, o.StartDate))?.ToList() ?? []
                };
        }
    }

    private void OnTaskCompleted(TaskItemCompletedNotification notification)
    {
        if (activeTaskItems == null)
        {
            return;
        };

        var taskItem = activeTaskItems.FirstOrDefault(x => x.Id == notification.TaskItemId);
        if (taskItem != null)
        {
            activeTaskItems.Remove(taskItem);
            taskItem.IsCompleted = true;
            completedTaskItems.Add(taskItem);
        }
    }

    public void Dispose()
    {
        taskCompletedSubscription?.Dispose();
    }
}
