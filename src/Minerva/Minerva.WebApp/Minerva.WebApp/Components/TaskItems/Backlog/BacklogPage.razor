@rendermode InteractiveServer
@page "/backlog"
@using Minerva.WebApp.Components.TaskItems.List
@using Minerva.Application.Features.TaskItems

@inject MediatR.IMediator mediator

<h3>Backlog</h3>

@if (taskItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <TaskItemsList TaskItems="taskItems" OnItemChanged="OnItemChanged" />
    <TaskItemsList TaskItems="completed" OnItemChanged="OnItemChanged" />
}

@code {
    private List<TaskItemListItemModel> taskItems = new();
    private List<TaskItemListItemModel> completed = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var data = mediator.CreateStream<TaskItemListItem>(new QueryBacklogRequest());

        await foreach (var item in data)
        {
            taskItems.Add(new TaskItemListItemModel
                {
                    Id = item.Id,
                    Title = item.Title,
                    IsCompleted = item.IsCompleted,
                    CreatedOn = item.CreatedOn,
                    Description = item.Description,
                    DueDate = item.DueDate
                });
        }
    }

    private void OnItemChanged(TaskItemListItemModel item)
    {
        if (item.IsCompleted)
        {
            completed.Add(item);
            taskItems.Remove(item);
        }
        else
        {
            taskItems.Add(item);
            completed.Remove(item);
        }
        StateHasChanged();
    }
}
